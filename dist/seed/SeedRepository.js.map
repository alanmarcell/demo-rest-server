{"version":3,"sources":["../../dist-esnext/seed/SeedRepository.js"],"names":["user","getDb","db","userApp","getUserApp","authedUser","ip","dtCreated","Date","displayName","id","email","userName","userArgs","saveUser","createdPrd","console","log","createUser","form","userNameOrEmail","password","toString","authUser","authenticateUserPtz","config","dbConnectionString","connect","userRepository"],"mappings":";;;;;;;;0DASA,kBAA0BA,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEyBC,sCAFzB;;AAAA;AAEcC,0BAFd;AAGcC,+BAHd,GAGwBC,WAAWF,EAAX,CAHxB;AAIcG,kCAJd,GAI2B;AACfC,gCAAI,EADW;AAEfC,uCAAW,IAAIC,IAAJ,EAFI;AAGfR,kCAAM;AACFS,6CAAa,OADX;AAEFC,oCAAI,OAFF;AAGFC,uCAAO,OAHL;AAIFC,0CAAU;AAJR;AAHS,yBAJ3B;AAccC,gCAdd,GAcyB;AACbA,sCAAUb,IADG;AAEbK;AAFa,yBAdzB;AAAA;AAAA,+BAkBiCF,QAAQW,QAAR,CAAiBD,QAAjB,CAlBjC;;AAAA;AAkBcE,kCAlBd;AAAA,0DAmBeA,UAnBf;;AAAA;AAAA;AAAA;;AAsBQC,gCAAQC,GAAR,CAAY,iBAAZ;;AAtBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeC,U;;;;;;0DAyBf,kBAAmClB,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEyBC,sCAFzB;;AAAA;AAEcC,0BAFd;AAGcC,+BAHd,GAGwBC,WAAWF,EAAX,CAHxB;AAIcG,kCAJd,GAI2B;AACfC,gCAAI,EADW;AAEfC,uCAAW,IAAIC,IAAJ,EAFI;AAGfR,kCAAM;AACFS,6CAAa,OADX;AAEFC,oCAAI,OAFF;AAGFC,uCAAO,OAHL;AAIFC,0CAAU;AAJR;AAHS,yBAJ3B;AAccO,4BAdd,GAcqB;AACTC,6CAAiBpB,KAAKoB,eADb;AAETC,sCAAUrB,KAAKqB,QAAL,CAAcC,QAAd;AAFD,yBAdrB;AAkBcT,gCAlBd,GAkByB;AACbM,sCADa;AAEbd;AAFa,yBAlBzB;AAAA;AAAA,+BAsBiCF,QAAQoB,QAAR,CAAiBV,QAAjB,CAtBjC;;AAAA;AAsBcE,kCAtBd;AAAA,0DAuBeA,UAvBf;;AAAA;AAAA;AAAA;;AA0BQC,gCAAQC,GAAR,CAAY,UAAZ;;AA1BR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeO,mB;;;;;AAlCf;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;;;AALA,iBAAOC,MAAP;;AAMA,IAAMxB;AAAA,yDAAQ,iBAAOyB,kBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAoC,qBAAYC,OAAZ,iCAApC;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAR;;AAAA;AAAA;AAAA;AAAA,GAAN;AACA,IAAMvB,aAAa,SAAbA,UAAa,CAACF,EAAD;AAAA,WAAQ,wBAAY,EAAE0B,gBAAgB,sCAAmB1B,EAAnB,CAAlB,EAA0Ce,eAA1C,EAAZ,CAAR;AAAA,CAAnB;QAuDSC,U,GAAAA,U;QAAYd,U,GAAAA,U;QAAYH,K,GAAAA,K;QAAOuB,mB,GAAAA,mB;AACxC","file":"SeedRepository.js","sourcesContent":["import dotenv from 'dotenv';\ndotenv.config();\nimport { MongoClient } from 'mongodb';\nimport { UserApp } from 'ptz-user-app';\nimport { UserRepository } from 'ptz-user-repository';\nimport { DB_CONNECTION_STRING } from '../config/constants';\nimport { log } from '../index';\nconst getDb = async (dbConnectionString) => await MongoClient.connect(DB_CONNECTION_STRING);\nconst getUserApp = (db) => new UserApp({ userRepository: new UserRepository(db), log });\nasync function createUser(user) {\n    try {\n        const db = await getDb(DB_CONNECTION_STRING);\n        const userApp = getUserApp(db);\n        const authedUser = {\n            ip: '',\n            dtCreated: new Date(),\n            user: {\n                displayName: 'teste',\n                id: 'teste',\n                email: 'teste',\n                userName: 'teste'\n            }\n        };\n        const userArgs = {\n            userArgs: user,\n            authedUser\n        };\n        const createdPrd = await userApp.saveUser(userArgs);\n        return createdPrd;\n    }\n    catch (e) {\n        console.log('Seed Repository', e);\n    }\n}\nasync function authenticateUserPtz(user) {\n    try {\n        const db = await getDb(DB_CONNECTION_STRING);\n        const userApp = getUserApp(db);\n        const authedUser = {\n            ip: '',\n            dtCreated: new Date(),\n            user: {\n                displayName: 'teste',\n                id: 'teste',\n                email: 'teste',\n                userName: 'teste'\n            }\n        };\n        const form = {\n            userNameOrEmail: user.userNameOrEmail,\n            password: user.password.toString()\n        };\n        const userArgs = {\n            form,\n            authedUser\n        };\n        const createdPrd = await userApp.authUser(userArgs);\n        return createdPrd;\n    }\n    catch (e) {\n        console.log('authUser', e);\n    }\n}\nexport { createUser, getUserApp, getDb, authenticateUserPtz };\n//# sourceMappingURL=SeedRepository.js.map"]}