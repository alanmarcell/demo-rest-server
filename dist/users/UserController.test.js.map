{"version":3,"sources":["../../dist-esnext/users/UserController.test.js"],"names":["UserController","config","req","res","userRepository","beforeEach","json","send","getAuthToken","func","args","authToken","user","userName","email","displayName","errors","decode","u","describe","it","authUser","username","token","body","userNameOrEmail","password","authenticateUser","authUserForm","encode","calledOnce","lastCall","success","hashPass","Promise","resolve","createUser","isValid","updateUser","d","otherUsersWithSameUserNameOrEmail","saveUser","message","next","verifyToken"],"mappings":"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","file":"UserController.test.js","sourcesContent":["import { createUserRepoFake, saveUser as save } from '@alanmarcell/ptz-user-app';\nimport dotenv from 'dotenv';\nimport { equal, ok } from 'ptz-assert';\nimport { spy } from 'sinon';\nimport * as UserController from './UserController';\ndotenv.config();\n// tslint:disable-next-line:prefer-const\nlet req;\n// tslint:disable-next-line:prefer-const\nlet res;\nconst userRepository = createUserRepoFake();\nbeforeEach(() => {\n    res = { json: spy(), send: spy() };\n});\nconst getAuthToken = (func) => async (args) => await {\n    authToken: 'authToken',\n    user: { userName: 'user', email: 'alanmarcell@live.com', displayName: 'Alan Marcell' },\n    errors: []\n};\nconst decode = (u) => u;\ndescribe('User Controller', () => {\n    it('authenticateUser', async () => {\n        const body = { userNameOrEmail: 'userNameOrEmail', password: 'password' };\n        function authUser() { return { user: { username: 'testName' }, token: 'testToken' }; }\n        req = { body };\n        // tslint:disable-next-line:max-line-length\n        await UserController.authenticateUser(getAuthToken({\n            authUserForm: decode,\n            authUser,\n            encode: decode\n        }), req, res);\n        // console.log(response);\n        ok(res.json.calledOnce);\n        ok(res.json.lastCall.args[0].success);\n    });\n    it('createUser', async () => {\n        const body = {\n            userName: 'alanMarcell',\n            email: 'angeloocana@gmail.com',\n            displayName: 'Angelo Ocana'\n        };\n        req = { body };\n        const hashPass = (u) => Promise.resolve(u), createUser = (u) => u, isValid = (u) => true, updateUser = (d, u) => u, otherUsersWithSameUserNameOrEmail = (d, u) => d;\n        const saveUser = save({\n            userRepository,\n            hashPass,\n            createUser,\n            isValid,\n            updateUser, otherUsersWithSameUserNameOrEmail\n        });\n        await UserController.createUser(saveUser, req, res);\n        ok(res.json.calledOnce);\n        equal(res.json.lastCall.args[0].message.userName, body.userName);\n        equal(res.json.lastCall.args[0].message.email, body.email);\n        equal(res.json.lastCall.args[0].message.displayName, body.displayName);\n    });\n    it('verifyToken', async () => {\n        // tslint:disable-next-line:max-line-length\n        const body = { token: 'faketoken' };\n        req = { body };\n        const next = spy();\n        await UserController.verifyToken(decode, req, res, next);\n        ok(next.calledOnce);\n    });\n});\n//# sourceMappingURL=UserController.test.js.map"]}