{"version":3,"sources":["../../dist-esnext/users/UserController.js"],"names":["req","res","next","token","body","query","headers","status","send","success","message","authedUser","getAuthedBy","originalUrl","getUserApp","userApp","verifyArgs","verifyAuthToken","toAuth","json","decoded","verifyToken","form","userNameOrEmail","password","toString","userArgs","getAuthToken","user","authToken","expiresIn","authenticateUser","ip","dtCreated","Date","displayName","id","email","userName","userRepository","log","createUser","curry","saveUser","result"],"mappings":"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","file":"UserController.js","sourcesContent":["import { createApp } from '@alanmarcell/ptz-user-app';\nimport { createUserRepository } from '@alanmarcell/ptz-user-repository';\nimport R from 'ramda';\nimport { DB_CONNECTION_STRING } from '../config/constants';\nimport { log } from '../index';\nconst expiresIn = 1000; // seconds\nconst getAuthedBy = (ip, user) => {\n    return {\n        ip,\n        dtCreated: new Date(),\n        user: user || {\n            displayName: 'Unknown User',\n            id: '0',\n            email: 'Unknown User',\n            userName: 'Unknown User'\n        }\n    };\n};\nconst getUserApp = async () => {\n    const userRepository = await createUserRepository(DB_CONNECTION_STRING, 'users');\n    return createApp({ userRepository, log });\n};\n// tslint:disable-next-line:max-line-length\nasync function verifyToken(req, res, next) {\n    const token = req.body.token || req.query.token || req.headers['x-access-token'];\n    if (!token)\n        return res.status(403).send({ success: false, message: 'No token provided.' });\n    const authedUser = getAuthedBy(req.originalUrl);\n    const userApp = await getUserApp();\n    const verifyArgs = { token, authedUser };\n    const toAuth = await userApp.verifyAuthToken(verifyArgs);\n    if (!toAuth)\n        return res.json({ success: false, message: 'Failed to authenticate token.' });\n    req.decoded = toAuth;\n    next();\n}\nasync function authenticateUser(req, res) {\n    try {\n        const userApp = await getUserApp();\n        const authedUser = getAuthedBy(req.originalUrl);\n        const form = {\n            userNameOrEmail: req.body.userNameOrEmail,\n            password: req.body.password.toString()\n        };\n        const userArgs = {\n            form,\n            authedUser\n        };\n        const token = await userApp.getAuthToken(userArgs);\n        if (!token.user)\n            return res.json({ success: false, message: 'Authentication failed. User not found.' });\n        res.json({\n            success: true,\n            message: 'Enjoy your token!',\n            token: token.authToken,\n            expiresIn\n        });\n    }\n    catch (e) {\n        res.send({ message: e });\n    }\n}\nconst createUser = R.curry(async (req, res) => {\n    try {\n        const user = req.body;\n        const userApp = await getUserApp();\n        const authedUser = getAuthedBy(req.originalUrl);\n        const userArgs = {\n            userArgs: user,\n            authedUser\n        };\n        const result = await userApp.saveUser(userArgs);\n        res.json({ success: true, message: result });\n    }\n    catch (e) {\n        res.send({ message: e });\n    }\n});\nexport { createUser, authenticateUser, verifyToken, getUserApp };\n//# sourceMappingURL=UserController.js.map"]}