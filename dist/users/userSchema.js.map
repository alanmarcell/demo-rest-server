{"version":3,"sources":["../../dist-esnext/users/userSchema.js"],"names":["UserSchema","userApp","log","userType","name","fields","id","type","userName","email","emailConfirmed","displayName","imgUrl","errors","userConnection","nodeType","getUserConnection","connectionType","args","resolve","_","ctx","findUsers","query","options","limit","first","authedUser","createdBy","getSaveUserMutation","outputViewer","inputFields","password","outputFields","userEdge","edgeType","user","node","cursor","viewer","mutateAndGetPayload","userArgs","param2","param3","saveUser","savedUser","getAuthTokenMutation","userNameOrEmail","authToken","form","getAuthToken"],"mappings":"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","file":"userSchema.js","sourcesContent":["import { GraphQLBoolean, GraphQLList, GraphQLNonNull, GraphQLObjectType, GraphQLString } from 'graphql';\nimport { connectionArgs, connectionDefinitions, connectionFromPromisedArray, mutationWithClientMutationId } from 'graphql-relay';\nfunction UserSchema({ userApp, log }) {\n    const userType = new GraphQLObjectType({\n        name: 'User',\n        fields: () => ({\n            id: { type: GraphQLString },\n            userName: { type: GraphQLString },\n            email: { type: GraphQLString },\n            emailConfirmed: { type: GraphQLBoolean },\n            displayName: { type: GraphQLString },\n            imgUrl: { type: GraphQLString },\n            // createdBy,\n            // dtChanged,\n            errors: { type: new GraphQLList(GraphQLString) }\n        })\n    });\n    const userConnection = connectionDefinitions({\n        name: 'User',\n        nodeType: userType\n    });\n    function getUserConnection() {\n        return {\n            type: userConnection.connectionType,\n            args: connectionArgs,\n            resolve: (_, args, ctx) => {\n                log('getting users');\n                return connectionFromPromisedArray(userApp.findUsers({\n                    query: {},\n                    options: { limit: args.first },\n                    authedUser: ctx.createdBy\n                }), args);\n            }\n        };\n    }\n    function getSaveUserMutation(outputViewer) {\n        return mutationWithClientMutationId({\n            name: 'SaveUser',\n            inputFields: {\n                id: { type: GraphQLString },\n                userName: { type: new GraphQLNonNull(GraphQLString) },\n                email: { type: new GraphQLNonNull(GraphQLString) },\n                displayName: { type: new GraphQLNonNull(GraphQLString) },\n                password: { type: new GraphQLNonNull(GraphQLString) },\n                errors: { type: new GraphQLList(GraphQLString) }\n            },\n            outputFields: {\n                userEdge: {\n                    type: userConnection.edgeType,\n                    resolve: (user) => {\n                        log('ql user', user);\n                        return { node: user, cursor: user.id };\n                    }\n                },\n                viewer: outputViewer\n            },\n            mutateAndGetPayload: async (userArgs, param2, param3) => {\n                try {\n                    log('saving user:', userArgs);\n                    log('saving param2:', param2);\n                    log('saving param3:', param3);\n                    const savedUser = await userApp.saveUser({\n                        userArgs,\n                        authedUser: null // TODO: FIX IT! SEND createdBy from context\n                    });\n                    log('saved user:', savedUser);\n                    return savedUser;\n                }\n                catch (e) {\n                    log('Error saving user:', e);\n                }\n            }\n        });\n    }\n    function getAuthTokenMutation(outputViewer) {\n        return mutationWithClientMutationId({\n            name: 'GetAuthToken',\n            inputFields: {\n                userNameOrEmail: { type: new GraphQLNonNull(GraphQLString) },\n                password: { type: new GraphQLNonNull(GraphQLString) }\n            },\n            outputFields: {\n                userEdge: {\n                    type: userConnection.edgeType,\n                    resolve: (authToken) => {\n                        if (authToken.user == null)\n                            return null;\n                        return { node: authToken.user, cursor: authToken.user.id };\n                    }\n                },\n                authToken: {\n                    type: GraphQLString,\n                    resolve: (authToken) => authToken.authToken\n                },\n                errors: {\n                    type: new GraphQLList(GraphQLString),\n                    resolve: (authToken) => authToken.errors\n                },\n                viewer: outputViewer\n            },\n            mutateAndGetPayload: async (form, param2, param3) => {\n                try {\n                    log('getAuthToken input:', form);\n                    const authToken = await userApp.getAuthToken({\n                        form,\n                        authedUser: null // TODO: FIX IT! SEND createdBy from context\n                    });\n                    log('getAuthToken return:', authToken);\n                    return authToken;\n                }\n                catch (e) {\n                    log('Error saving user:', e);\n                }\n            }\n        });\n    }\n    return {\n        getSaveUserMutation,\n        getUserConnection,\n        getAuthTokenMutation\n    };\n}\nexport default UserSchema;\n//# sourceMappingURL=userSchema.js.map"]}