{"version":3,"sources":["../../dist-esnext/users/UserController.js"],"names":["expiresIn","getAuthedBy","ip","user","dtCreated","Date","displayName","id","email","userName","verifyToken","curry","verifyAuthToken","req","res","next","token","body","query","headers","status","send","success","message","authedUser","originalUrl","verifyArgs","toAuth","json","decoded","authenticateUser","getAuthToken","form","userNameOrEmail","password","toString","userArgs","authToken","createUser","saveUser","result","console","log"],"mappings":";;;;;;;AAAA;;;;;;;;AACA;AACA,IAAMA,YAAY,IAAlB,C,CAAwB;AACxB,IAAMC,cAAc,SAAdA,WAAc,CAACC,EAAD,EAAKC,IAAL,EAAc;AAC9B,WAAO;AACHD,cADG;AAEHE,mBAAW,IAAIC,IAAJ,EAFR;AAGHF,cAAMA,QAAQ;AACVG,yBAAa,cADH;AAEVC,gBAAI,GAFM;AAGVC,mBAAO,cAHG;AAIVC,sBAAU;AAJA;AAHX,KAAP;AAUH,CAXD;AAYA;AACA,IAAMC,cAAc,gBAAEC,KAAF;AAAA,yDAAQ,iBAAOC,eAAP,EAAwBC,GAAxB,EAA6BC,GAA7B,EAAkCC,IAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBC,6BADkB,GACVH,IAAII,IAAJ,CAASD,KAAT,IAAkBH,IAAIK,KAAJ,CAAUF,KAA5B,IAAqCH,IAAIM,OAAJ,CAAY,gBAAZ,CAD3B;;AAAA,4BAEnBH,KAFmB;AAAA;AAAA;AAAA;;AAAA,yDAGbF,IAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBC,SAAS,oBAA3B,EAArB,CAHa;;AAAA;AAIlBC,kCAJkB,GAILvB,YAAYY,IAAIY,WAAhB,CAJK;AAKlBC,kCALkB,GAKL,EAAEV,YAAF,EAASQ,sBAAT,EALK;AAAA;AAAA,+BAMHZ,gBAAgBc,UAAhB,CANG;;AAAA;AAMlBC,8BANkB;;AAAA,4BAOnBA,MAPmB;AAAA;AAAA;AAAA;;AAAA,yDAQbb,IAAIc,IAAJ,CAAS,EAAEN,SAAS,KAAX,EAAkBC,SAAS,+BAA3B,EAAT,CARa;;AAAA;AASxBV,4BAAIgB,OAAJ,GAAcF,MAAd;AACAZ;;AAVwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAR;;AAAA;AAAA;AAAA;AAAA,IAApB;AAYA;AACA,IAAMe,mBAAmB,gBAAEnB,KAAF;AAAA,0DAAQ,kBAAOoB,YAAP,EAAqBlB,GAArB,EAA0BC,GAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEnBU,kCAFmB,GAENvB,YAAYY,IAAIY,WAAhB,CAFM;AAGnBO,4BAHmB,GAGZ;AACTC,6CAAiBpB,IAAII,IAAJ,CAASgB,eADjB;AAETC,sCAAUrB,IAAII,IAAJ,CAASiB,QAAT,CAAkBC,QAAlB;AAFD,yBAHY;AAOnBC,gCAPmB,GAOR;AACbJ,sCADa;AAEbR;AAFa,yBAPQ;AAAA;AAAA,+BAWLO,aAAaK,QAAb,CAXK;;AAAA;AAWnBpB,6BAXmB;;AAAA,4BAYpBA,MAAMb,IAZc;AAAA;AAAA;AAAA;;AAAA,0DAadW,IAAIc,IAAJ,CAAS,EAAEN,SAAS,KAAX,EAAkBC,SAAS,wCAA3B,EAAT,CAbc;;AAAA;AAczBT,4BAAIc,IAAJ,CAAS;AACLN,qCAAS,IADJ;AAELC,qCAAS,mBAFJ;AAGLP,mCAAOA,MAAMqB,SAHR;AAILrC;AAJK,yBAAT;AAdyB;AAAA;;AAAA;AAAA;AAAA;;AAsBzBc,4BAAIO,IAAJ,CAAS,EAAEE,qBAAF,EAAT;;AAtByB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAR;;AAAA;AAAA;AAAA;AAAA,IAAzB;AAyBA,IAAMe,aAAa,gBAAE3B,KAAF;AAAA,0DAAQ,kBAAO4B,QAAP,EAAiB1B,GAAjB,EAAsBC,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEbX,4BAFa,GAENU,IAAII,IAFE;AAGbO,kCAHa,GAGAvB,YAAYY,IAAIY,WAAhB,CAHA;AAIbW,gCAJa,GAIF;AACbA,sCAAUjC,IADG;AAEbqB;AAFa,yBAJE;AAAA;AAAA,+BAQEe,SAASH,QAAT,CARF;;AAAA;AAQbI,8BARa;;AASnB1B,4BAAIc,IAAJ,CAAS,EAAEN,SAAS,IAAX,EAAiBC,SAASiB,MAA1B,EAAT;AATmB;AAAA;;AAAA;AAAA;AAAA;;AAYnBC,gCAAQC,GAAR;AACA5B,4BAAIO,IAAJ,CAAS,EAAEE,qBAAF,EAAT;;AAbmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAR;;AAAA;AAAA;AAAA;AAAA,IAAnB;QAgBSe,U,GAAAA,U;QAAYR,gB,GAAAA,gB;QAAkBpB,W,GAAAA,W;AACvC","file":"UserController.js","sourcesContent":["import R from 'ramda';\n// import { log } from '../index';\nconst expiresIn = 1000; // seconds\nconst getAuthedBy = (ip, user) => {\n    return {\n        ip,\n        dtCreated: new Date(),\n        user: user || {\n            displayName: 'Unknown User',\n            id: '0',\n            email: 'Unknown User',\n            userName: 'Unknown User'\n        }\n    };\n};\n// tslint:disable-next-line:max-line-length\nconst verifyToken = R.curry(async (verifyAuthToken, req, res, next) => {\n    const token = req.body.token || req.query.token || req.headers['x-access-token'];\n    if (!token)\n        return res.status(403).send({ success: false, message: 'No token provided.' });\n    const authedUser = getAuthedBy(req.originalUrl);\n    const verifyArgs = { token, authedUser };\n    const toAuth = await verifyAuthToken(verifyArgs);\n    if (!toAuth)\n        return res.json({ success: false, message: 'Failed to authenticate token.' });\n    req.decoded = toAuth;\n    next();\n});\n// tslint:disable-next-line:max-line-length\nconst authenticateUser = R.curry(async (getAuthToken, req, res) => {\n    try {\n        const authedUser = getAuthedBy(req.originalUrl);\n        const form = {\n            userNameOrEmail: req.body.userNameOrEmail,\n            password: req.body.password.toString()\n        };\n        const userArgs = {\n            form,\n            authedUser\n        };\n        const token = await getAuthToken(userArgs);\n        if (!token.user)\n            return res.json({ success: false, message: 'Authentication failed. User not found.' });\n        res.json({\n            success: true,\n            message: 'Enjoy your token!',\n            token: token.authToken,\n            expiresIn\n        });\n    }\n    catch (e) {\n        res.send({ message: e });\n    }\n});\nconst createUser = R.curry(async (saveUser, req, res) => {\n    try {\n        const user = req.body;\n        const authedUser = getAuthedBy(req.originalUrl);\n        const userArgs = {\n            userArgs: user,\n            authedUser\n        };\n        const result = await saveUser(userArgs);\n        res.json({ success: true, message: result });\n    }\n    catch (e) {\n        console.log(e);\n        res.send({ message: e });\n    }\n});\nexport { createUser, authenticateUser, verifyToken };\n//# sourceMappingURL=UserController.js.map"]}