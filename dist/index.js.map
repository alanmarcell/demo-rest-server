{"version":3,"sources":["../dist-esnext/index.js"],"names":["schema","json","file","fs","writeFile","JSON","stringify","err","log","getRunningUrl","app","use","static","createGraphqlSchema","config","dir","PORT","path","connect","db","userApp","userRepository","seed","graphqlFolder","graphiql","listen","url"],"mappings":";;;yDAsBA,iBAAmCA,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACuB,sBAAQA,MAAR,gCADvB;;AAAA;AACUC,4BADV;AAEUC,4BAFV,GAEiB,qBAFjB;;AAGIC,2BAAGC,SAAH,OAAiBF,IAAjB,EAAyBG,KAAKC,SAAL,CAAeL,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAzB,EAAwD,eAAO;AAC3D,gCAAIM,GAAJ,EACI,MAAMA,GAAN;AACJC,gCAAI,sBAAJ,EAA4BC,cAAcP,IAAd,CAA5B;AACH,yBAJD;AAKAQ,4BAAIC,GAAJ,CAAQ,SAAR,EAAmB,kBAAQC,MAAR,CAAe,QAAf,CAAnB;;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeC,mB;;;;;AAtBf;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;IAAYV,E;;AACZ;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;;;;;;;AAZA,iBAAOW,MAAP;;AAaA,IAAMN,MAAM,0BAAQ,EAAEO,KAAK,QAAP,EAAR,CAAZ;AACA,IAAML,MAAM,wBAAZ;AACAA,IAAIC,GAAJ,CAAQ,qBAAR;AACAH,IAAI,iBAAJ;AACA,IAAMQ,OAAO,IAAb;AACA,SAASP,aAAT,CAAuBQ,IAAvB,EAA6B;AACzB,iCAA2BD,IAA3B,GAAkCC,IAAlC;AACH;;AAWD,0CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAEwB,qBAAYC,OAAZ,sBAFxB;;AAAA;AAEaC,sBAFb;AAGaC,2BAHb,GAGuB,wBAAY;AACxBC,wCAAgB,sCAAmBF,EAAnB,CADQ;AAExBX;AAFwB,qBAAZ,CAHvB;AAAA;AAAA,2BAOaY,QAAQE,IAAR,EAPb;;AAAA;AAQatB,0BARb,GAQsB,sBAAOoB,OAAP,EAAgBZ,GAAhB,CARtB;AASae,iCATb,GAS6B,UAT7B;;AAUOb,wBAAIC,GAAJ,CAAQY,aAAR,EAAuB,8BAAY;AAC/BvB,sCAD+B;AAE/BwB,kCAAU;AAFqB,qBAAZ,CAAvB;AAVP;AAAA,2BAcaX,oBAAoBb,MAApB,CAdb;;AAAA;AAeOU,wBAAIe,MAAJ,CAAWT,IAAX,EAAiB,YAAM;AACnB,4BAAMU,MAAMjB,cAAcc,aAAd,CAAZ;AACAf,4CAAkBkB,GAAlB;AACH,qBAHD;AAfP;AAAA;;AAAA;AAAA;AAAA;;AAqBOlB;;AArBP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD;AAwBA","file":"index.js","sourcesContent":["import dotenv from 'dotenv';\ndotenv.config();\nimport cors from 'cors';\nimport express from 'express';\nimport GraphQlHttp from 'express-graphql';\nimport * as fs from 'fs';\nimport { graphql } from 'graphql';\nimport { introspectionQuery } from 'graphql/utilities';\nimport { MongoClient } from 'mongodb';\nimport Schema from './core/schema';\nimport MONGO_URL from './mongoDbUrl';\nimport { UserApp } from 'ptz-user-app';\nimport { UserRepository } from 'ptz-user-repository';\nimport logFile from 'ptz-log-file';\nconst log = logFile({ dir: './logs' });\nconst app = express();\napp.use(cors());\nlog('starting server');\nconst PORT = 3011;\nfunction getRunningUrl(path) {\n    return `http://localhost:${PORT}${path}`;\n}\nasync function createGraphqlSchema(schema) {\n    const json = await graphql(schema, introspectionQuery);\n    const file = '/public/schema.json';\n    fs.writeFile(`.${file}`, JSON.stringify(json, null, 2), err => {\n        if (err)\n            throw err;\n        log('Json schema created!', getRunningUrl(file));\n    });\n    app.use('/public', express.static('public'));\n}\n(async () => {\n    try {\n        const db = await MongoClient.connect(MONGO_URL);\n        const userApp = new UserApp({\n            userRepository: new UserRepository(db),\n            log\n        });\n        await userApp.seed();\n        const schema = Schema(userApp, log);\n        const graphqlFolder = '/graphql';\n        app.use(graphqlFolder, GraphQlHttp({\n            schema,\n            graphiql: true\n        }));\n        await createGraphqlSchema(schema);\n        app.listen(PORT, () => {\n            const url = getRunningUrl(graphqlFolder);\n            log(`Running on ${url}`);\n        });\n    }\n    catch (e) {\n        log(e);\n    }\n})();\n//# sourceMappingURL=index.js.map"]}