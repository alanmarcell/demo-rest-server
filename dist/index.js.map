{"version":3,"sources":["../dist-esnext/index.js"],"names":["config","log","dir","env","process","NODE_ENV","app","PORT","use","urlencoded","extended","json","routes","renderIndex","req","res","error","url","message","get","next","status","Error","createServer","server","listen","address","console"],"mappings":";;AAAA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;;;;;AARA,iBAAOA,MAAP;AAMA;;AAGA,IAAMC,MAAM,0BAAQ,EAAEC,KAAK,QAAP,EAAR,CAAZ;AACA,IAAMC,MAAMC,QAAQD,GAAR,CAAYE,QAAZ,IAAwB,cAApC;AACA,IAAMC,MAAM,wBAAZ;AACAL,IAAI,iBAAJ;AACA,IAAMM,OAAOH,QAAQD,GAAR,CAAYI,IAAZ,IAAoB,IAAjC;AACAD,IAAIE,GAAJ,CAAQ,qBAAR;AACAF,IAAIE,GAAJ,CAAQ,qBAAWC,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAJ,IAAIE,GAAJ,CAAQ,qBAAWG,IAAX,EAAR;AACAL,IAAIE,GAAJ,CAAQ,sBAAO,KAAP,CAAR;AACAF,IAAIE,GAAJ,CAAQ,MAAR,EAAgB,uBAAiBI,MAAjC;AACA,IAAMC,cAAc,SAAdA,WAAc,CAACC,GAAD,EAAMC,GAAN,EAAc;AAC9BA,QAAIJ,IAAJ,CAAS;AACLK,eAAOF,IAAIG,GADN;AAELC,iBAAS;AAFJ,KAAT;AAIH,CALD;AAMAZ,IAAIa,GAAJ,CAAQ,IAAR,EAAcN,WAAd;AACA,IAAIV,QAAQ,cAAZ,EAA4B;AACxBG,QAAIE,GAAJ,CAAQ,UAACQ,KAAD,EAAQF,GAAR,EAAaC,GAAb,EAAkBK,IAAlB,EAA2B;AAC/BL,YAAIM,MAAJ,CAAWL,MAAMK,MAAN,IAAgB,GAA3B;AACAN,YAAIJ,IAAJ,CAAS;AACLK,wBADK;AAELE,qBAASJ;AAFJ,SAAT;AAIAM,aAAKL,GAAL;AACH,KAPD;AAQH;AACDT,IAAIE,GAAJ,CAAQ,UAACM,GAAD,EAAMC,GAAN,EAAWK,IAAX,EAAoB;AACxB,QAAMJ,QAAQ,IAAIM,KAAJ,CAAU,cAAcR,GAAd,GAAoBC,GAA9B,CAAd;AACAK,SAAKJ,KAAL;AACH,CAHD;AAIAV,IAAIE,GAAJ,CAAQ,UAACQ,KAAD,EAAQD,GAAR,EAAgB;AACpBA,QAAIM,MAAJ,CAAWL,MAAMK,MAAN,IAAgB,GAA3B;AACAN,QAAIJ,IAAJ,CAAS;AACLK,eAAO,EADF;AAELE,iBAASF,MAAME;AAFV,KAAT;AAIH,CAND;AAOA,0CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAE4B,eAAKK,YAAL,CAAkBjB,GAAlB,CAF5B;;AAAA;AAEakB,0BAFb;;AAGOlB,wBAAImB,MAAJ,CAAWlB,IAAX,4CAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACPiB,OAAOE,OAAP,EADO;;AAAA;AAEbC,gDAAQ1B,GAAR,CAAY,8CAA8CM,IAA1D;;AAFa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAjB;AAHP;AAAA;;AAAA;AAAA;AAAA;;AASON;;AATP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD;AAYA","file":"index.js","sourcesContent":["import dotenv from 'dotenv';\ndotenv.config();\nimport bodyParser from 'body-parser';\nimport cors from 'cors';\nimport express from 'express';\nimport http from 'http';\nimport morgan from 'morgan';\n// import path from 'path';\nimport BaseRoutes from './config/routes/Routes';\nimport logFile from 'ptz-log-file';\nconst log = logFile({ dir: './logs' });\nconst env = process.env.NODE_ENV || 'developement';\nconst app = express();\nlog('starting server');\nconst PORT = process.env.PORT || 3010;\napp.use(cors());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json());\napp.use(morgan('dev'));\napp.use('/api', new BaseRoutes().routes);\nconst renderIndex = (req, res) => {\n    res.json({\n        error: req.url,\n        message: '404'\n    });\n};\napp.get('/*', renderIndex);\nif (env === 'developement') {\n    app.use((error, req, res, next) => {\n        res.status(error.status || 500);\n        res.json({\n            error,\n            message: req\n        });\n        next(res);\n    });\n}\napp.use((req, res, next) => {\n    const error = new Error('Not Found' + req + res);\n    next(error);\n});\napp.use((error, res) => {\n    res.status(error.status || 500);\n    res.json({\n        error: {},\n        message: error.message\n    });\n});\n(async () => {\n    try {\n        const server = await http.createServer(app);\n        app.listen(PORT, async () => {\n            await server.address();\n            console.log('This express server is listening on port:' + PORT);\n        });\n    }\n    catch (e) {\n        log(e);\n    }\n})();\n//# sourceMappingURL=index.js.map"]}