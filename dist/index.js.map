{"version":3,"sources":["../dist-esnext/index.js"],"names":["log","dir","env","process","NODE_ENV","app","PORT","use","urlencoded","extended","json","renderIndex","req","res","error","url","message","get","next","status","Error","createServer","server","listen","address"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AACO,IAAMA,oBAAM,0BAAQ,EAAEC,KAAK,QAAP,EAAR,CAAZ;AACP,IAAMC,MAAMC,QAAQD,GAAR,CAAYE,QAAZ,IAAwB,cAApC;AACA,0CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEaC,uBAFb,GAEmB,wBAFnB;;AAGOL,wBAAI,wBAAJ;AACMM,wBAJb,GAIoBH,QAAQD,GAAR,CAAYI,IAAZ,IAAoB,IAJxC;;AAKOD,wBAAIE,GAAJ,CAAQ,qBAAR;AACAF,wBAAIE,GAAJ,CAAQ,qBAAWC,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAJ,wBAAIE,GAAJ,CAAQ,qBAAWG,IAAX,EAAR;AACAL,wBAAIE,GAAJ,CAAQ,sBAAO,KAAP,CAAR;AARP,mCASOF,GATP;AAAA;AAAA,2BAS6B,uBAT7B;;AAAA;AAAA;;AAAA,iCASWE,GATX,oBASe,MATf;;AAUaI,+BAVb,GAU2B,SAAdA,WAAc,CAACC,GAAD,EAAMC,GAAN,EAAc;AAC9BA,4BAAIH,IAAJ,CAAS;AACLI,mCAAOF,IAAIG,GADN;AAELC,qCAAS;AAFJ,yBAAT;AAIH,qBAfR;;AAgBOX,wBAAIY,GAAJ,CAAQ,IAAR,EAAcN,WAAd;AACA,wBAAIT,QAAQ,cAAZ,EAA4B;AACxBG,4BAAIE,GAAJ,CAAQ,UAACO,KAAD,EAAQF,GAAR,EAAaC,GAAb,EAAkBK,IAAlB,EAA2B;AAC/BL,gCAAIM,MAAJ,CAAWL,MAAMK,MAAN,IAAgB,GAA3B;AACAN,gCAAIH,IAAJ,CAAS;AACLI,4CADK;AAELE,yCAASJ;AAFJ,6BAAT;AAIAM,iCAAKL,GAAL;AACH,yBAPD;AAQH;AACDR,wBAAIE,GAAJ,CAAQ,UAACK,GAAD,EAAMC,GAAN,EAAWK,IAAX,EAAoB;AACxB,4BAAMJ,QAAQ,IAAIM,KAAJ,CAAU,cAAcR,GAAd,GAAoBC,GAA9B,CAAd;AACAK,6BAAKJ,KAAL;AACH,qBAHD;AAIAT,wBAAIE,GAAJ,CAAQ,UAACO,KAAD,EAAQD,GAAR,EAAgB;AACpBA,4BAAIM,MAAJ,CAAWL,MAAMK,MAAN,IAAgB,GAA3B;AACAN,4BAAIH,IAAJ,CAAS;AACLI,mCAAO,EADF;AAELE,qCAASF,MAAME;AAFV,yBAAT;AAIH,qBAND;AA/BP;AAAA,2BAsC4B,eAAKK,YAAL,CAAkBhB,GAAlB,CAtC5B;;AAAA;AAsCaiB,0BAtCb;;AAuCOjB,wBAAIkB,MAAJ,CAAWjB,IAAX,4CAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACPgB,OAAOE,OAAP,EADO;;AAAA;AAEbxB,4CAAI,8CAA8CM,IAAlD;;AAFa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAjB;AAvCP;AAAA;;AAAA;AAAA;AAAA;;AA6CON;;AA7CP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD;AAgDA","file":"index.js","sourcesContent":["import bodyParser from 'body-parser';\nimport cors from 'cors';\nimport express from 'express';\nimport http from 'http';\nimport morgan from 'morgan';\nimport BaseRoutes from './routes/Routes';\nimport logFile from 'ptz-log-file';\nexport const log = logFile({ dir: './logs' });\nconst env = process.env.NODE_ENV || 'developement';\n(async () => {\n    try {\n        const app = express();\n        log('Starting New server...');\n        const PORT = process.env.PORT || 3010;\n        app.use(cors());\n        app.use(bodyParser.urlencoded({ extended: false }));\n        app.use(bodyParser.json());\n        app.use(morgan('dev'));\n        app.use('/api', await BaseRoutes());\n        const renderIndex = (req, res) => {\n            res.json({\n                error: req.url,\n                message: '404'\n            });\n        };\n        app.get('/*', renderIndex);\n        if (env === 'developement') {\n            app.use((error, req, res, next) => {\n                res.status(error.status || 500);\n                res.json({\n                    error,\n                    message: req\n                });\n                next(res);\n            });\n        }\n        app.use((req, res, next) => {\n            const error = new Error('Not Found' + req + res);\n            next(error);\n        });\n        app.use((error, res) => {\n            res.status(error.status || 500);\n            res.json({\n                error: {},\n                message: error.message\n            });\n        });\n        const server = await http.createServer(app);\n        app.listen(PORT, async () => {\n            await server.address();\n            log('This express server is listening on port:' + PORT);\n        });\n    }\n    catch (e) {\n        log(e);\n    }\n})();\n//# sourceMappingURL=index.js.map"]}