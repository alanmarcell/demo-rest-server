{"version":3,"sources":["../../dist-esnext/users/UserApp.js"],"names":["user","userRepository","userApp","log","authedUser","ip","dtCreated","Date","displayName","id","email","userName","userArgs","saveUser","createdPrd","console","createUser","form","userNameOrEmail","password","toString","authUser","authenticateUserPtz","config"],"mappings":";;;;;;;AAMA;AACA;;yDACA,iBAA0BA,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACiC,8EAA2C,OAA3C,CADjC;;AAAA;AACUC,sCADV;AAEUC,+BAFV,GAEoB,2BAAU,EAAED,8BAAF,EAAkBE,eAAlB,EAAV,CAFpB;AAAA;;AAIQ;AACA;AACMC,kCANd,GAM2B;AACfC,gCAAI,EADW;AAEfC,uCAAW,IAAIC,IAAJ,EAFI;AAGfP,kCAAM;AACFQ,6CAAa,OADX;AAEFC,oCAAI,OAFF;AAGFC,uCAAO,OAHL;AAIFC,0CAAU;AAJR;AAHS,yBAN3B;AAgBcC,gCAhBd,GAgByB;AACbA,sCAAUZ,IADG;AAEbI;AAFa,yBAhBzB;AAAA;AAAA,+BAoBiCF,QAAQW,QAAR,CAAiBD,QAAjB,CApBjC;;AAAA;AAoBcE,kCApBd;AAAA,yDAqBeA,UArBf;;AAAA;AAAA;AAAA;;AAwBQC,gCAAQZ,GAAR,CAAY,iBAAZ;;AAxBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAea,U;;;;;;0DA2Bf,kBAAmChB,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEqC,8EAA2C,OAA3C,CAFrC;;AAAA;AAEcC,sCAFd;AAGcC,+BAHd,GAGwB,2BAAU,EAAED,8BAAF,EAAV,CAHxB;AAIcG,kCAJd,GAI2B;AACfC,gCAAI,EADW;AAEfC,uCAAW,IAAIC,IAAJ,EAFI;AAGfP,kCAAM;AACFQ,6CAAa,OADX;AAEFC,oCAAI,OAFF;AAGFC,uCAAO,OAHL;AAIFC,0CAAU;AAJR;AAHS,yBAJ3B;AAccM,4BAdd,GAcqB;AACTC,6CAAiBlB,KAAKkB,eADb;AAETC,sCAAUnB,KAAKmB,QAAL,CAAcC,QAAd;AAFD,yBAdrB;AAkBcR,gCAlBd,GAkByB;AACbK,sCADa;AAEbb;AAFa,yBAlBzB;AAAA;AAAA,+BAsBiCF,QAAQmB,QAAR,CAAiBT,QAAjB,CAtBjC;;AAAA;AAsBcE,kCAtBd;AAAA,0DAuBeA,UAvBf;;AAAA;AAAA;AAAA;;AA0BQC,gCAAQZ,GAAR,CAAY,UAAZ;;AA1BR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAemB,mB;;;;;AAnCf;;;;AAEA;;AACA;;AACA;;AACA;;;;;;AAJA,iBAAOC,MAAP;QA+DSP,U,GAAAA,U;QAAYM,mB,GAAAA,mB;AACrB","file":"UserApp.js","sourcesContent":["import dotenv from 'dotenv';\ndotenv.config();\nimport { createApp } from '@alanmarcell/ptz-user-app';\nimport { createUserRepository } from '@alanmarcell/ptz-user-repository';\nimport { DB_CONNECTION_STRING } from '../config/constants';\nimport { log } from '../index';\n// const getDb = async (dbConnectionString: string) => await MongoClient.connect(DB_CONNECTION_STRING);\n// const getUserApp = (db: Db) => new UserApp({ userRepository: new UserRepository(db), log });\nasync function createUser(user) {\n    const userRepository = await createUserRepository(DB_CONNECTION_STRING, 'users');\n    const userApp = createApp({ userRepository, log });\n    try {\n        // const db = await getDb(DB_CONNECTION_STRING);\n        // const userApp = getUserApp(db);\n        const authedUser = {\n            ip: '',\n            dtCreated: new Date(),\n            user: {\n                displayName: 'teste',\n                id: 'teste',\n                email: 'teste',\n                userName: 'teste'\n            }\n        };\n        const userArgs = {\n            userArgs: user,\n            authedUser\n        };\n        const createdPrd = await userApp.saveUser(userArgs);\n        return createdPrd;\n    }\n    catch (e) {\n        console.log('Seed Repository', e);\n    }\n}\nasync function authenticateUserPtz(user) {\n    try {\n        const userRepository = await createUserRepository(DB_CONNECTION_STRING, 'users');\n        const userApp = createApp({ userRepository });\n        const authedUser = {\n            ip: '',\n            dtCreated: new Date(),\n            user: {\n                displayName: 'teste',\n                id: 'teste',\n                email: 'teste',\n                userName: 'teste'\n            }\n        };\n        const form = {\n            userNameOrEmail: user.userNameOrEmail,\n            password: user.password.toString()\n        };\n        const userArgs = {\n            form,\n            authedUser\n        };\n        const createdPrd = await userApp.authUser(userArgs);\n        return createdPrd;\n    }\n    catch (e) {\n        console.log('authUser', e);\n    }\n}\nexport { createUser, authenticateUserPtz };\n//# sourceMappingURL=UserApp.js.map"]}