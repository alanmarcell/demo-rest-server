{"version":3,"sources":["../../../dist-esnext/app/repository/BaseRepository.js"],"names":["RepositoryBase","schemaModel","model","item","callback","create","err","res","console","log","start","items","find","skip","parseInt","limit","_id","update","findByIdAndRemove","toObjectId","findById","query","findOne","Types","ObjectId","createFromHexString"],"mappings":";;;;;;;;AAAA;;;;;;;;IACMA,c;AACF,4BAAYC,WAAZ,EAAyB;AAAA;;AACrB,aAAKC,KAAL,GAAaD,WAAb;AACH;;;;+BACME,I,EAAMC,Q,EAAU;AACnB,gBAAI;AACA,qBAAKF,KAAL,CAAWG,MAAX,CAAkBF,IAAlB,EAAwB,UAACG,GAAD,EAAMC,GAAN,EAAc;AAClC,wBAAID,GAAJ,EACIE,QAAQC,GAAR,CAAY,OAAZ,EAAqBH,GAArB;AACJF,6BAASE,GAAT,EAAcC,GAAd;AACH,iBAJD;AAKH,aAND,CAOA,OAAOD,GAAP,EAAY;AACRE,wBAAQC,GAAR,CAAYH,GAAZ;AACH;AACJ;;;iCACQF,Q,EAAUM,K,EAAOC,K,EAAO;AAC7B,gBAAIA,KAAJ;AACI;AACA,qBAAKT,KAAL,CAAWU,IAAX,CAAgB,EAAhB,EAAoBR,QAApB,EAA8BS,IAA9B,CAAmCC,SAASJ,KAAT,CAAnC,EAAoDK,KAApD,CAA0DD,SAASH,KAAT,CAA1D,EAFJ,KAII,KAAKT,KAAL,CAAWU,IAAX,CAAgB,EAAhB,EAAoBR,QAApB;AACP;AACD;;;;+BACOY,G,EAAKb,I,EAAMC,Q,EAAU;AACxB;AACA,iBAAKF,KAAL,CAAWe,MAAX,CAAkB,EAAED,QAAF,EAAlB,EAA2Bb,IAA3B,EAAiC,UAACG,GAAD,EAAMC,GAAN,EAAc;AAC3C,oBAAID,GAAJ,EACIE,QAAQC,GAAR,CAAY,OAAZ,EAAqBH,GAArB;AACJF,yBAASE,GAAT,EAAcC,GAAd;AACH,aAJD;AAKH;AACD;;;;gCACOS,G,EAAKZ,Q,EAAU;AAClB,iBAAKF,KAAL,CAAWgB,iBAAX,CAA6B,EAAEF,KAAK,KAAKG,UAAL,CAAgBH,GAAhB,CAAP,EAA7B,EAA4D,UAACV,GAAD,EAAMC,GAAN,EAAc;AACtE,oBAAID,GAAJ,EACIE,QAAQC,GAAR,CAAY,OAAZ,EAAqBH,GAArB;AACJF,yBAASE,GAAT,EAAcC,GAAd;AACH,aAJD;AAKH;AACD;;;;iCACSS,G,EAAKZ,Q,EAAU;AACpB,iBAAKF,KAAL,CAAWkB,QAAX,CAAoBJ,GAApB,EAAyBZ,QAAzB;AACH;;;gCACOiB,K,EAAOjB,Q,EAAU;AACrB,iBAAKF,KAAL,CAAWoB,OAAX,CAAmBD,KAAnB,EAA0BjB,QAA1B;AACH;AACD;;;;mCACWY,G,EAAK;AACZ,mBAAO,mBAASO,KAAT,CAAeC,QAAf,CAAwBC,mBAAxB,CAA4CT,GAA5C,CAAP;AACH;;;;;;kBAEUhB,c;AACf","file":"BaseRepository.js","sourcesContent":["import mongoose from 'mongoose';\nclass RepositoryBase {\n    constructor(schemaModel) {\n        this.model = schemaModel;\n    }\n    create(item, callback) {\n        try {\n            this.model.create(item, (err, res) => {\n                if (err)\n                    console.log('error', err);\n                callback(err, res);\n            });\n        }\n        catch (err) {\n            console.log(err);\n        }\n    }\n    retrieve(callback, start, items) {\n        if (items)\n            // tslint:disable-next-line:radix\n            this.model.find({}, callback).skip(parseInt(start)).limit(parseInt(items));\n        else\n            this.model.find({}, callback);\n    }\n    // tslint:disable-next-line:variable-name\n    update(_id, item, callback) {\n        // console.log(callback);\n        this.model.update({ _id }, item, (err, res) => {\n            if (err)\n                console.log('error', err);\n            callback(err, res);\n        });\n    }\n    // tslint:disable-next-line:variable-name\n    delete(_id, callback) {\n        this.model.findByIdAndRemove({ _id: this.toObjectId(_id) }, (err, res) => {\n            if (err)\n                console.log('error', err);\n            callback(err, res);\n        });\n    }\n    // tslint:disable-next-line:variable-name\n    findById(_id, callback) {\n        this.model.findById(_id, callback);\n    }\n    findOne(query, callback) {\n        this.model.findOne(query, callback);\n    }\n    // tslint:disable-next-line:variable-name\n    toObjectId(_id) {\n        return mongoose.Types.ObjectId.createFromHexString(_id);\n    }\n}\nexport default RepositoryBase;\n//# sourceMappingURL=BaseRepository.js.map"]}