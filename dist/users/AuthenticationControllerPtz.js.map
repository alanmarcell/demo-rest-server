{"version":3,"sources":["../../dist-esnext/users/AuthenticationControllerPtz.js"],"names":["req","res","user","body","SeedRepository","authenticateUserPtz","authUser","json","success","message","token","sign","expiresIn","send","verifyToken","next","query","headers","verify","err","decoded","status","authenticateUser","userName","name","error","password","e"],"mappings":";;;;;;;;yDA0BA,iBAAmCA,GAAnC,EAAwCC,GAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEcC,4BAFd,GAEqBF,IAAIG,IAFzB;AAAA;AAAA,+BAG+BC,eAAeC,mBAAf,CAAmCH,IAAnC,CAH/B;;AAAA;AAGcI,gCAHd;;AAAA,4BAIaA,QAJb;AAAA;AAAA;AAAA;;AAAA,yDAKmBL,IAAIM,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBC,SAAS,wCAA3B,EAAT,CALnB;;AAAA;AAMcC,6BANd,GAMsB,uBAAIC,IAAJ,CAAST,IAAT,2BAA6B;AACvCU,gDADuC,CAC7B;AAD6B,yBAA7B,CANtB;;AASQX,4BAAIM,IAAJ,CAAS;AACLC,qCAAS,IADJ;AAELC,qCAAS,mBAFJ;AAGLC,wCAHK;AAILE;AAJK,yBAAT;AATR;AAAA;;AAAA;AAAA;AAAA;;AAiBQ;AACAX,4BAAIY,IAAJ,CAAS,EAAEJ,SAAS,qBAAX,EAAT;;AAlBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeJ,mB;;;;;AA1Bf;;;;AACA;;AACA;;IAAYD,c;;AACZ;;AACA;;;;;;;;AACA,IAAMQ,YAAY,IAAlB,C,CAAwB;AACxB,SAASE,WAAT,CAAqBd,GAArB,EAA0BC,GAA1B,EAA+Bc,IAA/B,EAAqC;AACjC,QAAML,QAAQV,IAAIG,IAAJ,CAASO,KAAT,IAAkBV,IAAIgB,KAAJ,CAAUN,KAA5B,IAAqCV,IAAIiB,OAAJ,CAAY,gBAAZ,CAAnD;AACA,QAAIP,KAAJ,EAAW;AACP,+BAAIQ,MAAJ,CAAWR,KAAX,2BAAgC,UAACS,GAAD,EAAMC,OAAN,EAAkB;AAC9C,gBAAID,GAAJ,EAAS;AACLlB,oBAAIM,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBC,SAAS,+BAA3B,EAAT;AACH,aAFD,MAGK;AACDT,oBAAIoB,OAAJ,GAAcA,OAAd;AACAL;AACH;AACJ,SARD;AASH,KAVD,MAWK;AACDd,YAAIoB,MAAJ,CAAW,GAAX,EAAgBR,IAAhB,CAAqB;AACjBL,qBAAS,KADQ;AAEjBC,qBAAS;AAFQ,SAArB;AAIH;AACJ;;AAsBD,SAASa,gBAAT,CAA0BtB,GAA1B,EAA+BC,GAA/B,EAAoC;AAChC,QAAI;AACA,YAAMsB,WAAWvB,IAAIG,IAAJ,CAASqB,IAA1B;AACA,oCAASD,QAAT,EAAmB,UAACE,KAAD,EAAQvB,IAAR,EAAiB;AAChC,gBAAIuB,KAAJ,EACI,OAAOxB,IAAIY,IAAJ,CAAS,EAAEY,OAAO,OAAT,EAAT,CAAP;AACJ,gBAAI,CAACvB,IAAL,EACI,OAAOD,IAAIM,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBC,SAAS,wCAA3B,EAAT,CAAP;AACJ,gBAAIP,KAAKwB,QAAL,KAAkB1B,IAAIG,IAAJ,CAASuB,QAA/B,EACI,OAAOzB,IAAIM,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBC,SAAS,wCAA3B,EAAT,CAAP;AACJ,gBAAMC,QAAQ,uBAAIC,IAAJ,CAAST,IAAT,2BAA6B;AACvCU,oCADuC,CAC7B;AAD6B,aAA7B,CAAd;AAGAX,gBAAIM,IAAJ,CAAS;AACLC,yBAAS,IADJ;AAELC,yBAAS,mBAFJ;AAGLC,4BAHK;AAILE;AAJK,aAAT;AAMH,SAhBD;AAiBH,KAnBD,CAoBA,OAAOe,CAAP,EAAU;AACN,wBAAIA,CAAJ;AACA1B,YAAIY,IAAJ,CAAS,EAAEY,OAAO,uBAAT,EAAT;AACH;AACJ;QACQH,gB,GAAAA,gB;QAAkBjB,mB,GAAAA,mB;QAAqBS,W,GAAAA,W;AAChD","file":"AuthenticationControllerPtz.js","sourcesContent":["import jwt from 'jsonwebtoken';\nimport { log } from '../index';\nimport * as SeedRepository from '../seed/SeedRepository';\nimport { TOKEN_SECRET } from './../config/constants';\nimport { findUser } from './../users/UserBusiness';\nconst expiresIn = 1000; // seconds\nfunction verifyToken(req, res, next) {\n    const token = req.body.token || req.query.token || req.headers['x-access-token'];\n    if (token) {\n        jwt.verify(token, TOKEN_SECRET, (err, decoded) => {\n            if (err) {\n                res.json({ success: false, message: 'Failed to authenticate token.' });\n            }\n            else {\n                req.decoded = decoded;\n                next();\n            }\n        });\n    }\n    else {\n        res.status(403).send({\n            success: false,\n            message: 'No token provided.'\n        });\n    }\n}\nasync function authenticateUserPtz(req, res) {\n    try {\n        const user = req.body;\n        const authUser = await SeedRepository.authenticateUserPtz(user);\n        if (!authUser)\n            return res.json({ success: false, message: 'Authentication failed. User not found.' });\n        const token = jwt.sign(user, TOKEN_SECRET, {\n            expiresIn // expires in 60 seconds\n        });\n        res.json({\n            success: true,\n            message: 'Enjoy your token!',\n            token,\n            expiresIn\n        });\n    }\n    catch (e) {\n        log(e);\n        res.send({ message: 'AUTH_CONTROLLER _|_' });\n    }\n}\nfunction authenticateUser(req, res) {\n    try {\n        const userName = req.body.name;\n        findUser(userName, (error, user) => {\n            if (error)\n                return res.send({ error: 'error' });\n            if (!user)\n                return res.json({ success: false, message: 'Authentication failed. User not found.' });\n            if (user.password !== req.body.password)\n                return res.json({ success: false, message: 'Authentication failed. Wrong password.' });\n            const token = jwt.sign(user, TOKEN_SECRET, {\n                expiresIn // expires in 60 seconds\n            });\n            res.json({\n                success: true,\n                message: 'Enjoy your token!',\n                token,\n                expiresIn\n            });\n        });\n    }\n    catch (e) {\n        log(e);\n        res.send({ error: 'error in your request' });\n    }\n}\nexport { authenticateUser, authenticateUserPtz, verifyToken };\n//# sourceMappingURL=AuthenticationControllerPtz.js.map"]}