{"version":3,"sources":["../../../dist-esnext/app/business/ProductBusiness.test.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ProductBusiness.test.js","sourcesContent":["// import chai from 'chai';\n// import R from 'ramda';\n// import IProductModel from './../model/interfaces/ProductModel';\n// import ProductBusiness from './ProductBusiness';\n// const should = require('chai').should();\n// chai.should();\n// const productBusiness = new ProductBusiness();\n// let productCreatedID;\n// let createRes;\n// const product: IProductModel = {\n//   category: 'newCategory',\n//   name: 'newName',\n//   price: 10\n// };\n// before('should create product', () => {\n//   return new Promise((resolve, reject) => {\n//     productBusiness.create(product, (error, result) => {\n//       createRes = result || error;\n//       resolve(productCreatedID = result._id)\n//     });\n//   });\n// });\n// describe('ProductBusiness', () => {\n//   describe('Create', () => {\n//     it('should create products', () => {\n//       createRes.category.should.be.equal(product.category);\n//     });\n//   });\n//   let retrieveRes;\n//   before('retrieve prod', () => {\n//     productBusiness.retrieve((error, result) =>\n//       retrieveRes = result || error\n//     );\n//   });\n//   describe('Retrieve', () => {\n//     it('should retrieve products ', () => {\n//       retrieveRes.should.be.an('array');\n//     });\n//     it('should have created product ', () => {\n//       const createdProd = retrieveRes.find((prod) =>\n//         R.equals(prod._id, productCreatedID)\n//       );\n//       createdProd._id.should.be.deep.equal(productCreatedID);\n//     });\n//   });\n//   let findRes;\n//   before('find prods', () => {\n//     productBusiness.findById(productCreatedID, (error, result) => {\n//       findRes = result || error;\n//       console.log('--------------------', findRes);\n//     });\n//   });\n//   describe('FindById', () => {\n//     it('should find products By Id', () => {\n//       findRes._id.should.be.deep.equal(productCreatedID);\n//       findRes.should.be.an('object');\n//     });\n//   });\n//   describe('Update', () => {\n//     it('should update product', () => {\n//       let res;\n//       // tslint:disable-next-line:no-shadowed-variable\n//       const product: IProductModel = {\n//         category: 'updatedCategoryToDEl',\n//         name: 'updatedNameToDel',\n//         price: 10\n//       };\n//       productBusiness.update(productCreatedID, product, (error, result) => {\n//         if (error) res = { error: 'error create controller' };\n//         else res = { success: 'success' };\n//         console.log('update', result);\n//         // result.ok.should.not.be.equal('0');\n//         // result.should.be.an('object');\n//       });\n//     });\n//   });\n//   describe('Delete', () => {\n//     it('should delete product', () => {\n//       let res;\n//       productBusiness.delete(productCreatedID.toString(), (error, result) => {\n//         if (error) res = { error: 'error create controller' };\n//         else res = { success: 'success' };\n//         console.log('delete', result.result);\n//         // result.should.be.an('object');\n//         // result.result.ok.should.not.be.equal('1');\n//       });\n//     });\n//   });\n// });\n//# sourceMappingURL=ProductBusiness.test.js.map"]}