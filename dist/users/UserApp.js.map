{"version":3,"sources":["../../dist-esnext/users/UserApp.js"],"names":["req","res","user","body","SeedRepository","authenticateUserPtz","authUser","json","success","message","token","sign","expiresIn","send","result","error","seedUsers","createUser","verifyToken","next","query","headers","verify","err","decoded","status"],"mappings":";;;;;;;;yDA0BA,iBAAmCA,GAAnC,EAAwCC,GAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEcC,4BAFd,GAEqBF,IAAIG,IAFzB;AAAA;AAAA,+BAG+BC,eAAeC,mBAAf,CAAmCH,IAAnC,CAH/B;;AAAA;AAGcI,gCAHd;;AAAA,4BAIaA,QAJb;AAAA;AAAA;AAAA;;AAAA,yDAKmBL,IAAIM,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBC,SAAS,wCAA3B,EAAT,CALnB;;AAAA;AAMcC,6BANd,GAMsB,uBAAIC,IAAJ,CAAST,IAAT,2BAA6B;AACvCU,gDADuC,CAC7B;AAD6B,yBAA7B,CANtB;;AASQX,4BAAIM,IAAJ,CAAS;AACLC,qCAAS,IADJ;AAELC,qCAAS,mBAFJ;AAGLC,wCAHK;AAILE;AAJK,yBAAT;AATR;AAAA;;AAAA;AAAA;AAAA;;AAiBQ;AACAX,4BAAIY,IAAJ,CAAS,EAAEJ,SAAS,qBAAX,EAAT;;AAlBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeJ,mB;;;;;;0DAqBf,kBAAyBL,GAAzB,EAA8BC,GAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAE6B,0CAF7B;;AAAA;AAEca,8BAFd;;AAGQb,4BAAIY,IAAJ,CAAS,EAAEJ,SAAS,QAAX,EAAT;AAHR;AAAA;;AAAA;AAAA;AAAA;;AAMQ;AACAR,4BAAIY,IAAJ,CAAS,EAAEE,OAAO,uBAAT,EAAT;;AAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeC,S;;;;;;0DAUf,kBAA0BhB,GAA1B,EAA+BC,GAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEcC,4BAFd,GAEqBF,IAAIG,IAFzB;AAAA;AAAA,+BAG6BC,eAAea,UAAf,CAA0Bf,IAA1B,CAH7B;;AAAA;AAGcY,8BAHd;;AAIQb,4BAAIY,IAAJ,CAAS,EAAEJ,SAASK,MAAX,EAAT;AAJR;AAAA;;AAAA;AAAA;AAAA;;AAOQ;AACAb,4BAAIY,IAAJ,CAAS,EAAEJ,qBAAF,EAAT;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeQ,U;;;;;AAzDf;;;;AACA;;AACA;;AACA;;IAAYb,c;;AACZ;;;;;;;;AACA,IAAMQ,YAAY,IAAlB,C,CAAwB;AACxB,SAASM,WAAT,CAAqBlB,GAArB,EAA0BC,GAA1B,EAA+BkB,IAA/B,EAAqC;AACjC,QAAMT,QAAQV,IAAIG,IAAJ,CAASO,KAAT,IAAkBV,IAAIoB,KAAJ,CAAUV,KAA5B,IAAqCV,IAAIqB,OAAJ,CAAY,gBAAZ,CAAnD;AACA,QAAIX,KAAJ,EAAW;AACP,+BAAIY,MAAJ,CAAWZ,KAAX,2BAAgC,UAACa,GAAD,EAAMC,OAAN,EAAkB;AAC9C,gBAAID,GAAJ,EAAS;AACLtB,oBAAIM,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBC,SAAS,+BAA3B,EAAT;AACH,aAFD,MAGK;AACDT,oBAAIwB,OAAJ,GAAcA,OAAd;AACAL;AACH;AACJ,SARD;AASH,KAVD,MAWK;AACDlB,YAAIwB,MAAJ,CAAW,GAAX,EAAgBZ,IAAhB,CAAqB;AACjBL,qBAAS,KADQ;AAEjBC,qBAAS;AAFQ,SAArB;AAIH;AACJ;QA2CQO,S,GAAAA,S;QAAWC,U,GAAAA,U;QAAYZ,mB,GAAAA,mB;QAAqBa,W,GAAAA,W;AACrD","file":"UserApp.js","sourcesContent":["import jwt from 'jsonwebtoken';\nimport { createConnection } from '../core/BaseRepositoryPtz';\nimport { log } from '../index';\nimport * as SeedRepository from '../users/UserRepository';\nimport { TOKEN_SECRET } from './../config/constants';\nconst expiresIn = 1000; // seconds\nfunction verifyToken(req, res, next) {\n    const token = req.body.token || req.query.token || req.headers['x-access-token'];\n    if (token) {\n        jwt.verify(token, TOKEN_SECRET, (err, decoded) => {\n            if (err) {\n                res.json({ success: false, message: 'Failed to authenticate token.' });\n            }\n            else {\n                req.decoded = decoded;\n                next();\n            }\n        });\n    }\n    else {\n        res.status(403).send({\n            success: false,\n            message: 'No token provided.'\n        });\n    }\n}\nasync function authenticateUserPtz(req, res) {\n    try {\n        const user = req.body;\n        const authUser = await SeedRepository.authenticateUserPtz(user);\n        if (!authUser)\n            return res.json({ success: false, message: 'Authentication failed. User not found.' });\n        const token = jwt.sign(user, TOKEN_SECRET, {\n            expiresIn // expires in 60 seconds\n        });\n        res.json({\n            success: true,\n            message: 'Enjoy your token!',\n            token,\n            expiresIn\n        });\n    }\n    catch (e) {\n        log(e);\n        res.send({ message: 'AUTH_CONTROLLER _|_' });\n    }\n}\nasync function seedUsers(req, res) {\n    try {\n        const result = await createConnection();\n        res.send({ message: 'Sedado' });\n    }\n    catch (e) {\n        log(e);\n        res.send({ error: 'error in your request' });\n    }\n}\nasync function createUser(req, res) {\n    try {\n        const user = req.body;\n        const result = await SeedRepository.createUser(user);\n        res.send({ message: result });\n    }\n    catch (e) {\n        log(e);\n        res.send({ message: e });\n    }\n}\nexport { seedUsers, createUser, authenticateUserPtz, verifyToken };\n//# sourceMappingURL=UserApp.js.map"]}