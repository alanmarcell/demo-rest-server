{"version":3,"sources":["../../dist-esnext/users/AuthenticationController.js"],"names":["expiresIn","verifyToken","req","res","next","token","body","query","headers","verify","err","decoded","json","success","message","status","send","authenticateUser","userName","name","error","user","password","sign","e"],"mappings":";;;;;;;AAAA;;;;AACA;;AACA;;AACA;;;;AACA,IAAMA,YAAY,IAAlB,C,CAAwB;AACxB,SAASC,WAAT,CAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,EAAqC;AACjC,QAAMC,QAAQH,IAAII,IAAJ,CAASD,KAAT,IAAkBH,IAAIK,KAAJ,CAAUF,KAA5B,IAAqCH,IAAIM,OAAJ,CAAY,gBAAZ,CAAnD;AACA,QAAIH,KAAJ,EAAW;AACP,+BAAII,MAAJ,CAAWJ,KAAX,2BAAgC,UAACK,GAAD,EAAMC,OAAN,EAAkB;AAC9C,gBAAID,GAAJ,EAAS;AACLP,oBAAIS,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBC,SAAS,+BAA3B,EAAT;AACH,aAFD,MAGK;AACDZ,oBAAIS,OAAJ,GAAcA,OAAd;AACAP;AACH;AACJ,SARD;AASH,KAVD,MAWK;AACDD,YAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBH,qBAAS,KADQ;AAEjBC,qBAAS;AAFQ,SAArB;AAIH;AACJ;AACD,SAASG,gBAAT,CAA0Bf,GAA1B,EAA+BC,GAA/B,EAAoC;AAChC,QAAI;AACA,YAAMe,WAAWhB,IAAII,IAAJ,CAASa,IAA1B;AACA,oCAASD,QAAT,EAAmB,UAACE,KAAD,EAAQC,IAAR,EAAiB;AAChC,gBAAID,KAAJ,EACI,OAAOjB,IAAIa,IAAJ,CAAS,EAAEI,OAAO,OAAT,EAAT,CAAP;AACJ,gBAAI,CAACC,IAAL,EACI,OAAOlB,IAAIS,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBC,SAAS,wCAA3B,EAAT,CAAP;AACJ,gBAAIO,KAAKC,QAAL,KAAkBpB,IAAII,IAAJ,CAASgB,QAA/B,EACI,OAAOnB,IAAIS,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBC,SAAS,wCAA3B,EAAT,CAAP;AACJ,gBAAMT,QAAQ,uBAAIkB,IAAJ,CAASF,IAAT,2BAA6B;AACvCrB,oCADuC,CAC7B;AAD6B,aAA7B,CAAd;AAGAG,gBAAIS,IAAJ,CAAS;AACLC,yBAAS,IADJ;AAELC,yBAAS,mBAFJ;AAGLT,4BAHK;AAILL;AAJK,aAAT;AAMH,SAhBD;AAiBH,KAnBD,CAoBA,OAAOwB,CAAP,EAAU;AACN,wBAAIA,CAAJ;AACArB,YAAIa,IAAJ,CAAS,EAAEI,OAAO,uBAAT,EAAT;AACH;AACJ;QACQH,gB,GAAAA,gB;QAAkBhB,W,GAAAA,W;AAC3B","file":"AuthenticationController.js","sourcesContent":["import jwt from 'jsonwebtoken';\nimport { log } from '../index';\nimport { TOKEN_SECRET } from './../config/constants';\nimport { findUser } from './../users/UserBusiness';\nconst expiresIn = 1000; // seconds\nfunction verifyToken(req, res, next) {\n    const token = req.body.token || req.query.token || req.headers['x-access-token'];\n    if (token) {\n        jwt.verify(token, TOKEN_SECRET, (err, decoded) => {\n            if (err) {\n                res.json({ success: false, message: 'Failed to authenticate token.' });\n            }\n            else {\n                req.decoded = decoded;\n                next();\n            }\n        });\n    }\n    else {\n        res.status(403).send({\n            success: false,\n            message: 'No token provided.'\n        });\n    }\n}\nfunction authenticateUser(req, res) {\n    try {\n        const userName = req.body.name;\n        findUser(userName, (error, user) => {\n            if (error)\n                return res.send({ error: 'error' });\n            if (!user)\n                return res.json({ success: false, message: 'Authentication failed. User not found.' });\n            if (user.password !== req.body.password)\n                return res.json({ success: false, message: 'Authentication failed. Wrong password.' });\n            const token = jwt.sign(user, TOKEN_SECRET, {\n                expiresIn // expires in 60 seconds\n            });\n            res.json({\n                success: true,\n                message: 'Enjoy your token!',\n                token,\n                expiresIn\n            });\n        });\n    }\n    catch (e) {\n        log(e);\n        res.send({ error: 'error in your request' });\n    }\n}\nexport { authenticateUser, verifyToken };\n//# sourceMappingURL=AuthenticationController.js.map"]}