{"version":3,"sources":["../../dist-esnext/core/schema.js"],"names":["Schema","userApp","log","appSchema","menuSchema","userSchema","viewer","viewerType","name","fields","id","app","type","appType","resolve","menu","menuType","userConnection","getUserConnection","outputViewer","schema","query","mutation","saveUser","getSaveUserMutation","getAuthToken","getAuthTokenMutation"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AAQA;;;;AAKA,SAASA,MAAT,CAAgBC,OAAhB,EAAyBC,GAAzB,EAA8B;AAC1B,QAAMC,YAAY,yBAAU,EAAED,QAAF,EAAV,CAAlB;AACA,QAAME,aAAa,0BAAW,EAAEF,QAAF,EAAX,CAAnB;AACA,QAAMG,aAAa,0BAAW,EAAEJ,gBAAF,EAAWC,QAAX,EAAX,CAAnB;AACA,QAAMI,SAAS,EAAf;AACA,QAAMC,aAAa,+BAAsB;AACrCC,cAAM,QAD+B;AAErCC,gBAAQ;AAAA,mBAAO;AACXC,oBAAI,iCAAc,QAAd,CADO;AAEXC,qBAAK,EAAEC,MAAMT,UAAUU,OAAlB,EAA2BC,SAAS;AAAA;AAAA,qBAApC,EAFM;AAGXC,sBAAM,EAAEH,MAAMR,WAAWY,QAAnB,EAA6BF,SAAS;AAAA;AAAA,qBAAtC,EAHK;AAIXG,gCAAgBZ,WAAWa,iBAAX;AAJL,aAAP;AAAA;AAF6B,KAAtB,CAAnB;AASA,QAAMC,eAAe;AACjBP,cAAML,UADW;AAEjBO,iBAAS;AAAA,mBAAMR,MAAN;AAAA;AAFQ,KAArB;AAIA,QAAMc,SAAS,2BAAkB;AAC7BC,eAAO,+BAAsB;AACzBb,kBAAM,OADmB;AAEzBC,oBAAQ;AAAA,uBAAO;AACXH,4BAAQ;AACJM,8BAAML,UADF;AAEJO,iCAAS;AAAA,mCAAMR,MAAN;AAAA;AAFL;AADG,iBAAP;AAAA;AAFiB,SAAtB,CADsB;AAU7BgB,kBAAU,+BAAsB;AAC5Bd,kBAAM,UADsB;AAE5BC,oBAAQ;AAAA,uBAAO;AACXc,8BAAUlB,WAAWmB,mBAAX,CAA+BL,YAA/B,CADC;AAEXM,kCAAcpB,WAAWqB,oBAAX,CAAgCP,YAAhC;AAFH,iBAAP;AAAA;AAFoB,SAAtB;AAVmB,KAAlB,CAAf;AAkBA,WAAOC,MAAP;AACH;kBACcpB,M;AACf","file":"schema.js","sourcesContent":["import MenuSchema, { menu } from '../menus/menuSchema';\nimport UserSchema from '../users/userSchema';\nimport AppSchema, { app } from './appSchema';\nimport { \n// GraphQLID,\n// GraphQLInt,\n// GraphQLList,\n// GraphQLNonNull,\nGraphQLObjectType, GraphQLSchema\n// GraphQLString\n } from 'graphql';\nimport { \n// connectionArgs,\n// connectionDefinitions,\n// connectionFromPromisedArray,\nglobalIdField, } from 'graphql-relay';\nfunction Schema(userApp, log) {\n    const appSchema = AppSchema({ log });\n    const menuSchema = MenuSchema({ log });\n    const userSchema = UserSchema({ userApp, log });\n    const viewer = {};\n    const viewerType = new GraphQLObjectType({\n        name: 'Viewer',\n        fields: () => ({\n            id: globalIdField('Viewer'),\n            app: { type: appSchema.appType, resolve: () => app },\n            menu: { type: menuSchema.menuType, resolve: () => menu },\n            userConnection: userSchema.getUserConnection()\n        })\n    });\n    const outputViewer = {\n        type: viewerType,\n        resolve: () => viewer\n    };\n    const schema = new GraphQLSchema({\n        query: new GraphQLObjectType({\n            name: 'Query',\n            fields: () => ({\n                viewer: {\n                    type: viewerType,\n                    resolve: () => viewer\n                }\n            })\n        }),\n        mutation: new GraphQLObjectType({\n            name: 'Mutation',\n            fields: () => ({\n                saveUser: userSchema.getSaveUserMutation(outputViewer),\n                getAuthToken: userSchema.getAuthTokenMutation(outputViewer)\n            })\n        })\n    });\n    return schema;\n}\nexport default Schema;\n//# sourceMappingURL=schema.js.map"]}