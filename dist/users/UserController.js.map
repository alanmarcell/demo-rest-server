{"version":3,"sources":["../../dist-esnext/users/UserController.js"],"names":["req","res","next","token","body","query","headers","status","send","success","message","authedUser","getAuthedBy","getUserApp","userApp","verifyArgs","verifyAuthToken","toAuth","json","decoded","verifyToken","user","form","userNameOrEmail","password","toString","userArgs","getAuthToken","authToken","expiresIn","authenticateUser","saveUser","result","createUser","ip","dtCreated","Date","displayName","id","email","userName","userRepository","log"],"mappings":"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","file":"UserController.js","sourcesContent":["import { createApp } from '@alanmarcell/ptz-user-app';\nimport { createUserRepository } from '@alanmarcell/ptz-user-repository';\nimport { DB_CONNECTION_STRING } from '../config/constants';\nimport { log } from '../index';\nconst expiresIn = 1000; // seconds\nconst getAuthedBy = () => {\n    return {\n        ip: '',\n        dtCreated: new Date(),\n        user: {\n            displayName: 'teste',\n            id: 'teste',\n            email: 'teste',\n            userName: 'teste'\n        }\n    };\n};\nconst getUserApp = async () => {\n    const userRepository = await createUserRepository(DB_CONNECTION_STRING, 'users');\n    return createApp({ userRepository, log });\n};\n// tslint:disable-next-line:max-line-length\nasync function verifyToken(req, res, next) {\n    const token = req.body.token || req.query.token || req.headers['x-access-token'];\n    if (!token)\n        return res.status(403).send({ success: false, message: 'No token provided.' });\n    const authedUser = getAuthedBy();\n    const userApp = await getUserApp();\n    const verifyArgs = { token, authedUser };\n    const toAuth = await userApp.verifyAuthToken(verifyArgs);\n    if (!toAuth)\n        return res.json({ success: false, message: 'Failed to authenticate token.' });\n    req.decoded = toAuth;\n    next();\n}\nasync function authenticateUser(req, res) {\n    try {\n        const user = req.body;\n        const userApp = await getUserApp();\n        const authedUser = getAuthedBy();\n        const form = {\n            userNameOrEmail: user.userNameOrEmail,\n            password: user.password.toString()\n        };\n        const userArgs = {\n            form,\n            authedUser\n        };\n        const token = await userApp.getAuthToken(userArgs);\n        if (!token.user)\n            return res.json({ success: false, message: 'Authentication failed. User not found.' });\n        res.json({\n            success: true,\n            message: 'Enjoy your token!',\n            token: token.authToken,\n            expiresIn\n        });\n    }\n    catch (e) {\n        res.send({ message: e });\n    }\n}\nasync function createUser(req, res) {\n    try {\n        const user = req.body;\n        const userApp = await getUserApp();\n        const authedUser = getAuthedBy();\n        const userArgs = {\n            userArgs: user,\n            authedUser\n        };\n        const result = await userApp.saveUser(userArgs);\n        res.send({ message: result });\n    }\n    catch (e) {\n        res.send({ message: e });\n    }\n}\nexport { createUser, authenticateUser, verifyToken };\n//# sourceMappingURL=UserController.js.map"]}