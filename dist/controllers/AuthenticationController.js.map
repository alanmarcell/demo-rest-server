{"version":3,"sources":["../../dist-esnext/controllers/AuthenticationController.js"],"names":["expiresIn","AuthenticationController","req","res","next","token","body","query","headers","console","log","verify","err","decoded","json","success","message","status","send","userName","name","userBusiness","findOne","error","user","password","sign","e"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AACA,IAAMA,YAAY,EAAlB;;IACMC,wB;;;;;;;oCACUC,G,EAAKC,G,EAAKC,I,EAAM;AACxB;AACA,gBAAMC,QAAQH,IAAII,IAAJ,CAASD,KAAT,IAAkBH,IAAIK,KAAJ,CAAUF,KAA5B,IAAqCH,IAAIM,OAAJ,CAAY,gBAAZ,CAAnD;AACA;AACA,gBAAIH,KAAJ,EAAW;AACP;AACAI,wBAAQC,GAAR;AACAD,wBAAQC,GAAR;AACA,uCAAIC,MAAJ,CAAWN,KAAX,2BAAgC,UAACO,GAAD,EAAMC,OAAN,EAAkB;AAC9C,wBAAID,GAAJ,EAAS;AACLT,4BAAIW,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBC,SAAS,+BAA3B,EAAT;AACH,qBAFD,MAGK;AACD;AACAd,4BAAIW,OAAJ,GAAcA,OAAd;AACAT;AACH;AACJ,iBATD;AAUH,aAdD,MAeK;AACD;AACA;AACAD,oBAAIc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBH,6BAAS,KADQ;AAEjBC,6BAAS;AAFQ,iBAArB;AAIH;AACJ;;;yCACgBd,G,EAAKC,G,EAAK;AACvBM,oBAAQC,GAAR;AACAD,oBAAQC,GAAR;AACA,gBAAI;AACA,oBAAMS,WAAWjB,IAAII,IAAJ,CAASc,IAA1B;AACA,oBAAMC,eAAe,4BAArB;AACAA,6BAAaC,OAAb,CAAqBH,QAArB,EAA+B,UAACI,KAAD,EAAQC,IAAR,EAAiB;AAC5C,wBAAID,KAAJ,EACI,OAAOpB,IAAIe,IAAJ,CAAS,EAAEK,OAAO,OAAT,EAAT,CAAP;AACJ,wBAAI,CAACC,IAAL,EACI,OAAOrB,IAAIW,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBC,SAAS,wCAA3B,EAAT,CAAP;AACJ;AACA,wBAAIQ,KAAKC,QAAL,KAAkBvB,IAAII,IAAJ,CAASmB,QAA/B,EACI,OAAOtB,IAAIW,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBC,SAAS,wCAA3B,EAAT,CAAP;AACJ;AACA;AACA,wBAAMX,QAAQ,uBAAIqB,IAAJ,CAASF,IAAT,2BAA6B;AACvCxB,4CADuC,CAC7B;AAD6B,qBAA7B,CAAd;AAGA;AACAG,wBAAIW,IAAJ,CAAS;AACLC,iCAAS,IADJ;AAELC,iCAAS,mBAFJ;AAGLX,oCAHK;AAILL;AAJK,qBAAT;AAMH,iBApBD;AAqBH,aAxBD,CAyBA,OAAO2B,CAAP,EAAU;AACNlB,wBAAQC,GAAR,CAAYiB,CAAZ;AACAxB,oBAAIe,IAAJ,CAAS,EAAEK,OAAO,uBAAT,EAAT;AACH;AACJ;;;;;;kBAEUtB,wB;AACf","file":"AuthenticationController.js","sourcesContent":["import jwt from 'jsonwebtoken';\nimport UserBusiness from './../app/business/UserBusiness';\nimport { TOKEN_SECRET } from './../config/constants';\nconst expiresIn = 10;\nclass AuthenticationController {\n    verifyToken(req, res, next) {\n        // check header or url parameters or post parameters for token\n        const token = req.body.token || req.query.token || req.headers['x-access-token'];\n        // decode token\n        if (token) {\n            // verifies secret and checks exp\n            console.log(TOKEN_SECRET);\n            console.log(typeof (TOKEN_SECRET));\n            jwt.verify(token, TOKEN_SECRET, (err, decoded) => {\n                if (err) {\n                    res.json({ success: false, message: 'Failed to authenticate token.' });\n                }\n                else {\n                    // if everything is good, save to request for use in other routes\n                    req.decoded = decoded;\n                    next();\n                }\n            });\n        }\n        else {\n            // if there is no token\n            // return an error\n            res.status(403).send({\n                success: false,\n                message: 'No token provided.'\n            });\n        }\n    }\n    authenticateUser(req, res) {\n        console.log(TOKEN_SECRET);\n        console.log(typeof (TOKEN_SECRET));\n        try {\n            const userName = req.body.name;\n            const userBusiness = new UserBusiness();\n            userBusiness.findOne(userName, (error, user) => {\n                if (error)\n                    return res.send({ error: 'error' });\n                if (!user)\n                    return res.json({ success: false, message: 'Authentication failed. User not found.' });\n                // check if password matches\n                if (user.password !== req.body.password)\n                    return res.json({ success: false, message: 'Authentication failed. Wrong password.' });\n                // if user is found and password is right\n                // create a token\n                const token = jwt.sign(user, TOKEN_SECRET, {\n                    expiresIn // expires in 60 seconds\n                });\n                // return the information including token as JSON\n                res.json({\n                    success: true,\n                    message: 'Enjoy your token!',\n                    token,\n                    expiresIn\n                });\n            });\n        }\n        catch (e) {\n            console.log(e);\n            res.send({ error: 'error in your request' });\n        }\n    }\n}\nexport default AuthenticationController;\n//# sourceMappingURL=AuthenticationController.js.map"]}